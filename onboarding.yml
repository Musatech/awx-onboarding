- name: 'Create access to new users in the organization Musa'
  hosts: localhost
  vars_files:
    - vaults.yaml
    - vars.json
  tasks:
    - name: 'Install packages to create new user on Google Admin Console'
      pip:
        name:
          - google-api-core==1.15.0
          - google-api-python-client==1.8.4
          - google-auth
          - google-auth-httplib2
          - google-auth-oauthlib
        state: present
        extra_args: "--disable-pip-version-check --user"

    - name: 'Create User to WMS - AWS Cognito'
      command: >
        aws cognito-idp admin-create-user
        --user-pool-id "{{ user_pool_id }}"
        --username "{{ phone }}"
        --desired-delivery-mediums SMS
        --message-action SUPPRESS
        --temporary-password "{{ password }}"
        --user-attributes Name=email,Value="{{ email }}" Name=phone_number,Value="{{ phone }}" Name=email_verified,Value=true Name=phone_number_verified,Value=true
      environment:
        AWS_ACCESS_KEY_ID: "{{ lookup('env','AWS_ACCESS_KEY_ID') }}"
        AWS_SECRET_ACCESS_KEY: "{{ lookup('env','AWS_SECRET_ACCESS_KEY') }}"
        AWS_DEFAULT_REGION: "us-east-1"
      become: no

    - name: 'Add user in group admin to access WMS - AWS Cognito'
      command: >
        aws cognito-idp admin-add-user-to-group
        --user-pool-id "{{ user_pool_id }}"
        --username "{{ phone }}"
        --group-name "{{ group_name }}"
      environment:
        AWS_ACCESS_KEY_ID: "{{ lookup('env','AWS_ACCESS_KEY_ID') }}"
        AWS_SECRET_ACCESS_KEY: "{{ lookup('env','AWS_SECRET_ACCESS_KEY') }}"
        AWS_DEFAULT_REGION: "us-east-1"
      become: no

    - name: 'Create new e-mail to Google Admin Console'
      gsuite_user:
        google_private_key: '{{ google_private_key }}'
        google_subject: '{{ google_admin_user }}'
        email: '{{ email }}'
        familyName: '{{ lastname }}'
        givenName: '{{ firstname }}'
        employeeId: '{{ email }}'
        password: '{{ item.gsuite.password | default(default_password) }}'
        changePasswordAtNextLogin: '{{ item.gsuite.changePasswordAtNextLogin | default(true) }}'
        orgUnitPath: '{{ orgUnitPath | default("/") }}'
        aliases: '{{ email }}'
        groups: '{{ item.gsuite.groups }}'
        suspended: false
        transferUserEmail: '{{ item.gsuite.transferUserEmail | default("") }}'
        state: '{{ item.gsuite.state | default("present") }}'
      loop: "{{ user_details }}"


